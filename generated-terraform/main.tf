# Infrastructure Configuration Generated by Optimisely Cloud SDK
# Original scan performed on: 2024-12-25T10:30:00.000Z
# Provider: AWS
# Region: us-east-1
# Total Resources: 8

# EC2 Instance: web-server-prod
resource "aws_instance" "web-server-prod" {
  ami           = data.aws_ami.web-server-prod.id
  instance_type = var.instance_type_override != "" ? var.instance_type_override : "t3.medium"
  key_name      = var.key_name

  subnet_id                   = subnet-12345678
  vpc_security_group_ids      = [aws_security_group.web-server-prod.id]
  associate_public_ip_address = true

  root_block_device {
    volume_type = "gp3"
    volume_size = 20
    encrypted   = true
  }
  tags = {
    Environment = "production"
    Project = "web-app"
    Owner = "devops-team"
    GeneratedBy = "optimisely-cloud-sdk"
    GeneratedAt = "2025-09-25T23:46:26.948Z"
    OriginalId = "i-1234567890abcdef0"
  }

  lifecycle {
    create_before_destroy = true
  }
}

# Data source for latest AMI
data "aws_ami" "web-server-prod" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-gp2"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
}

# Security Group for web-server-prod
resource "aws_security_group" "web-server-prod" {
  name_prefix = "web-server-prod-"
  description = "Security group for web-server-prod"

  # Allow SSH access
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = [var.allowed_ssh_cidr]
  }

  # Allow HTTP access
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Allow HTTPS access
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Allow all outbound traffic
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
    Environment = "production"
    Project = "web-app"
    Owner = "devops-team"
    GeneratedBy = "optimisely-cloud-sdk"
    GeneratedAt = "2025-09-25T23:46:26.948Z"
    OriginalId = "i-1234567890abcdef0"
  }
}

# EC2 Instance: app-server-prod
resource "aws_instance" "app-server-prod" {
  ami           = data.aws_ami.app-server-prod.id
  instance_type = var.instance_type_override != "" ? var.instance_type_override : "m5.large"
  key_name      = var.key_name

  subnet_id                   = subnet-87654321
  vpc_security_group_ids      = [aws_security_group.app-server-prod.id]
  associate_public_ip_address = true

  root_block_device {
    volume_type = "gp3"
    volume_size = 50
    encrypted   = true
  }
  tags = {
    Environment = "production"
    Project = "web-app"
    Owner = "devops-team"
    GeneratedBy = "optimisely-cloud-sdk"
    GeneratedAt = "2025-09-25T23:46:26.948Z"
    OriginalId = "i-0987654321fedcba0"
  }

  lifecycle {
    create_before_destroy = true
  }
}

# Data source for latest AMI
data "aws_ami" "app-server-prod" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-gp2"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
}

# Security Group for app-server-prod
resource "aws_security_group" "app-server-prod" {
  name_prefix = "app-server-prod-"
  description = "Security group for app-server-prod"

  # Allow SSH access
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = [var.allowed_ssh_cidr]
  }

  # Allow HTTP access
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Allow HTTPS access
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Allow all outbound traffic
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
    Environment = "production"
    Project = "web-app"
    Owner = "devops-team"
    GeneratedBy = "optimisely-cloud-sdk"
    GeneratedAt = "2025-09-25T23:46:26.948Z"
    OriginalId = "i-0987654321fedcba0"
  }
}

# S3 Bucket: web-app-assets
resource "aws_s3_bucket" "web-app-assets" {
  bucket = "${var.bucket_prefix}-web-app-assets-${random_string.web-app-assets.result}"
  tags = {
    Environment = "production"
    Project = "web-app"
    Purpose = "static-assets"
    GeneratedBy = "optimisely-cloud-sdk"
    GeneratedAt = "2025-09-25T23:46:26.948Z"
    OriginalId = "bucket-web-app-assets"
  }
}

resource "random_string" "web-app-assets" {
  length  = 8
  special = false
  upper   = false
}

# S3 Bucket versioning
resource "aws_s3_bucket_versioning" "web-app-assets" {
  bucket = aws_s3_bucket.web-app-assets.id
  versioning_configuration {
    status = var.enable_versioning ? "Enabled" : "Suspended"
  }
}

# S3 Bucket encryption
resource "aws_s3_bucket_server_side_encryption_configuration" "web-app-assets" {
  bucket = aws_s3_bucket.web-app-assets.id

  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm = "AES256"
    }
  }
}

# S3 Bucket public access block
resource "aws_s3_bucket_public_access_block" "web-app-assets" {
  bucket = aws_s3_bucket.web-app-assets.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

# S3 Bucket: web-app-backups
resource "aws_s3_bucket" "web-app-backups" {
  bucket = "${var.bucket_prefix}-web-app-backups-${random_string.web-app-backups.result}"
  tags = {
    Environment = "production"
    Project = "web-app"
    Purpose = "backups"
    GeneratedBy = "optimisely-cloud-sdk"
    GeneratedAt = "2025-09-25T23:46:26.948Z"
    OriginalId = "bucket-web-app-backups"
  }
}

resource "random_string" "web-app-backups" {
  length  = 8
  special = false
  upper   = false
}

# S3 Bucket versioning
resource "aws_s3_bucket_versioning" "web-app-backups" {
  bucket = aws_s3_bucket.web-app-backups.id
  versioning_configuration {
    status = var.enable_versioning ? "Enabled" : "Suspended"
  }
}

# S3 Bucket encryption
resource "aws_s3_bucket_server_side_encryption_configuration" "web-app-backups" {
  bucket = aws_s3_bucket.web-app-backups.id

  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm = "AES256"
    }
  }
}

# S3 Bucket public access block
resource "aws_s3_bucket_public_access_block" "web-app-backups" {
  bucket = aws_s3_bucket.web-app-backups.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

# RDS Instance: web-app-mysql
resource "aws_db_instance" "web-app-mysql" {
  identifier = "${var.db_prefix}-web-app-mysql"

  # Database Configuration
  engine                = "mysql"
  engine_version        = var.mysql_version
  instance_class        = "db.t3.medium"
  allocated_storage     = 100
  max_allocated_storage = 200
  storage_type          = "gp3"
  storage_encrypted     = true

  # Database Credentials
  db_name  = var.web-app-mysql_db_name
  username = var.web-app-mysql_username
  password = var.web-app-mysql_password

  # Network Configuration
  db_subnet_group_name   = aws_db_subnet_group.web-app-mysql.name
  vpc_security_group_ids = [aws_security_group.web-app-mysql_db.id]

  # Backup Configuration
  backup_retention_period = var.backup_retention_days
  backup_window          = var.backup_window
  maintenance_window     = var.maintenance_window

  # Security Configuration
  deletion_protection = var.deletion_protection
  skip_final_snapshot = !var.final_snapshot_enabled
  tags = {
    Environment = "production"
    Project = "web-app"
    Engine = "mysql"
    GeneratedBy = "optimisely-cloud-sdk"
    GeneratedAt = "2025-09-25T23:46:26.948Z"
    OriginalId = "db-web-app-mysql"
  }

  lifecycle {
    prevent_destroy = true
  }
}

# DB Subnet Group
resource "aws_db_subnet_group" "web-app-mysql" {
  name       = "${var.db_prefix}-web-app-mysql-subnet-group"
  subnet_ids = var.database_subnet_ids
  tags = {
    Environment = "production"
    Project = "web-app"
    Engine = "mysql"
    GeneratedBy = "optimisely-cloud-sdk"
    GeneratedAt = "2025-09-25T23:46:26.948Z"
    OriginalId = "db-web-app-mysql"
  }
}

# Security Group for Database
resource "aws_security_group" "web-app-mysql_db" {
  name_prefix = "web-app-mysql-db-"
  description = "Security group for web-app-mysql database"

  ingress {
    from_port       = 3306
    to_port         = 3306
    protocol        = "tcp"
    security_groups = [aws_security_group.web-app-mysql_app.id]
  }
  tags = {
    Environment = "production"
    Project = "web-app"
    Engine = "mysql"
    GeneratedBy = "optimisely-cloud-sdk"
    GeneratedAt = "2025-09-25T23:46:26.948Z"
    OriginalId = "db-web-app-mysql"
  }
}

# Security Group for Application Access
resource "aws_security_group" "web-app-mysql_app" {
  name_prefix = "web-app-mysql-app-"
  description = "Security group for applications accessing web-app-mysql"
  tags = {
    Environment = "production"
    Project = "web-app"
    Engine = "mysql"
    GeneratedBy = "optimisely-cloud-sdk"
    GeneratedAt = "2025-09-25T23:46:26.948Z"
    OriginalId = "db-web-app-mysql"
  }
}

# VPC: web-app-vpc
resource "aws_vpc" "web-app-vpc" {
  cidr_block           = var.web-app-vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support   = true
  tags = {
    Environment = "production"
    Project = "web-app"
    Purpose = "main-vpc"
    GeneratedBy = "optimisely-cloud-sdk"
    GeneratedAt = "2025-09-25T23:46:26.948Z"
    OriginalId = "vpc-12345678"
  }
}

# Internet Gateway
resource "aws_internet_gateway" "web-app-vpc_igw" {
  vpc_id = aws_vpc.web-app-vpc.id
  tags = {
    Environment = "production"
    Project = "web-app"
    Purpose = "main-vpc"
    GeneratedBy = "optimisely-cloud-sdk"
    GeneratedAt = "2025-09-25T23:46:26.948Z"
    OriginalId = "vpc-12345678"
  }
}

# Route Table
resource "aws_route_table" "web-app-vpc_public" {
  vpc_id = aws_vpc.web-app-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.web-app-vpc_igw.id
  }
  tags = {
    Environment = "production"
    Project = "web-app"
    Purpose = "main-vpc"
    GeneratedBy = "optimisely-cloud-sdk"
    GeneratedAt = "2025-09-25T23:46:26.948Z"
    OriginalId = "vpc-12345678"
  }
}

# Lambda Function: image-resizer
resource "aws_lambda_function" "image-resizer" {
  filename         = "${path.module}/lambda_functions/image-resizer.zip"
  function_name    = "${var.function_prefix}-image-resizer"
  role            = aws_iam_role.image-resizer_lambda.arn
  handler         = var.image-resizer_handler
  runtime         = var.image-resizer_runtime
  timeout         = var.image-resizer_timeout
  memory_size     = var.image-resizer_memory

  source_code_hash = filebase64sha256("${path.module}/lambda_functions/image-resizer.zip")
  tags = {
    Environment = "production"
    Project = "web-app"
    Function = "image-processing"
    GeneratedBy = "optimisely-cloud-sdk"
    GeneratedAt = "2025-09-25T23:46:26.949Z"
    OriginalId = "lambda-image-resizer"
  }
}

# IAM Role for Lambda Function
resource "aws_iam_role" "image-resizer_lambda" {
  name = "${var.function_prefix}-image-resizer-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

# Basic execution policy for Lambda
resource "aws_iam_role_policy_attachment" "image-resizer_lambda_basic" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  role       = aws_iam_role.image-resizer_lambda.name
}